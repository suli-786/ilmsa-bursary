---
const deadlineText = "Monday, 26 January 2026"; // Adjust if needed

const steps = [
  {
    label: "Step 01",
    title: "Launch the online application form",
    body:
      "Select “Apply” on this site and carefully work through each question. Give yourself at least 20 minutes, double-check your information, and be truthful throughout.",
    highlight: "You must complete every required field before you can submit.",
  },
  {
    label: "Step 02",
    title: "Watch for your confirmation email",
    body:
      "Within minutes you’ll receive a confirmation email from ILM-SA. It details the supporting documents we need and how to prepare them.",
    highlight: "Read the email in full and keep it handy—everything else happens via that thread.",
  },
  {
    label: "Step 03",
    title: "Reply with your supporting documents",
    body:
      "Gather the requested documents, ensure they are clear, and reply directly to the confirmation email with all attachments. Keep the subject line unchanged.",
    highlight: "Send one reply with complete attachments instead of multiple partial emails.",
  },
  {
    label: "Step 04",
    title: "Await shortlist updates & interviews",
    body:
      `If shortlisted, we’ll contact you by ${deadlineText} to arrange an interview. No news by then means your application was not successful this time.`,
    highlight: "Keep your contact details up to date and monitor your inbox (and spam) regularly.",
  },
];
---
<section
  id="how-to-apply"
  class="relative mx-auto max-w-6xl px-4 py-16 scroll-mt-28"
>
  <div class="absolute inset-0 -z-10 rounded-3xl bg-[color-mix(in_lch,var(--brand-secondary)_35%,white)] blur-3xl opacity-70"></div>

  <div class="relative overflow-hidden rounded-3xl border border-[color-mix(in_lch,var(--brand-secondary)_25%,white)] bg-[color-mix(in_lch,var(--brand-secondary)_18%,white)] shadow-xl shadow-black/5">
    <div class="absolute left-0 top-0 h-full w-1 bg-[--brand-secondary]/80 opacity-80"></div>

    <div class="relative px-6 py-10 md:px-10 lg:px-14">
      <header class="mb-12 max-w-3xl space-y-3" data-animate>
        <span class="inline-flex items-center gap-2 rounded-full bg-white/70 px-3 py-1 text-xs font-semibold uppercase tracking-[0.3em] text-[--brand-secondary]">
          Four-step process
        </span>
        <h2 class="text-3xl font-extrabold tracking-tight text-[#0b1d2a] md:text-4xl">
          How to apply
        </h2>
        <p class="text-base text-[#13313f]/90 md:text-lg">
          Follow each step sequentially. Every action builds on the last to keep your application on track.
        </p>
      </header>

      <ol class="timeline relative border-l border-white/70 pl-10 text-[#0b1d2a]">
        {steps.map((step, index) => (
          <li
            class="relative pb-14 last:pb-0"
            data-animate
          >
            <div class="absolute -left-[35px] top-0 flex h-9 w-9 items-center justify-center rounded-full bg-white text-sm font-semibold text-[--brand-secondary] shadow-md shadow-[--brand-secondary]/30 ring-2 ring-[--brand-secondary]/40">
              {String(index + 1).padStart(2, "0")}
            </div>

            <article class="relative flex flex-col gap-4 rounded-3xl bg-white/92 px-6 py-6 text-[#13313f] shadow-[0_12px_45px_rgba(11,29,42,0.12)] backdrop-blur">
              <div class="flex flex-col gap-2 md:flex-row md:items-baseline md:justify-between">
                <span class="text-xs font-semibold uppercase tracking-[0.28em] text-[--brand-secondary]/80">
                  {step.label}
                </span>
                <p class="text-sm font-medium uppercase tracking-[0.24em] text-[--brand-primary]/80 md:text-xs">
                  Follow sequentially
                </p>
              </div>
              <div class="space-y-3 text-sm leading-7 md:text-base">
                <h3 class="text-xl font-semibold text-[#05141c]">{step.title}</h3>
                <p>{step.body}</p>
              </div>
              <div class="rounded-2xl border border-[color-mix(in_lch,var(--brand-primary)_25%,white)] bg-[color-mix(in_lch,var(--brand-primary)_12%,white)] px-4 py-3 text-sm font-medium text-[#0b1d2a]">
                <span class="font-semibold text-[--brand-primary]">Remember:</span> {step.highlight}
              </div>
            </article>
          </li>
        ))}
      </ol>

      <aside
        class="mt-12 flex flex-col gap-4 rounded-2xl border border-white/60 bg-white/85 px-6 py-6 text-sm text-[#0b1d2a] shadow-sm md:flex-row md:items-center md:justify-between md:text-base"
        data-animate
      >
        <div class="flex items-center gap-3">
          <span class="inline-flex h-9 w-9 items-center justify-center rounded-full border border-[--brand-primary] bg-[--brand-primary] text-white">
            TIP
          </span>
          <p>
            Prepare clear digital copies of your documents before you start—the review team can progress your application faster when everything arrives together.
          </p>
        </div>
        <div class="text-sm uppercase tracking-[0.26em] text-[--brand-primary]/80 md:text-xs">
          Stay organised • Respond quickly
        </div>
      </aside>
    </div>
  </div>
</section>

<script is:inline>
  const initHowToApplyAnimations = () => {
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');
    const timelineBlocks = document.querySelectorAll('#how-to-apply [data-animate]');

    if (!timelineBlocks.length) {
      return;
    }

    const prepareAnimations = () => {
      timelineBlocks.forEach((el, index) => {
        el.classList.add('is-preparing');
        el.style.transitionDelay = `${index * 70}ms`;
      });
    };

    const revealImmediately = () => {
      timelineBlocks.forEach((el) => {
        el.classList.remove('is-preparing');
        el.classList.add('is-visible');
      });
    };

    prepareAnimations();

    if (!('IntersectionObserver' in window)) {
      revealImmediately();
      return;
    }

    if (prefersReducedMotion.matches) {
      revealImmediately();
      return;
    }

    const observer = new IntersectionObserver(
      (entries, obs) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('is-visible');
            entry.target.classList.remove('is-preparing');
            obs.unobserve(entry.target);
          }
        });
      },
      {
        rootMargin: '0px 0px -10% 0px',
        threshold: 0.25,
      },
    );

    timelineBlocks.forEach((el) => observer.observe(el));
  };

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initHowToApplyAnimations, { once: true });
  } else {
    initHowToApplyAnimations();
  }
</script>

<style>
  #how-to-apply .timeline::before {
    content: "";
    position: absolute;
    inset: 0;
    border-left: 1px solid rgba(255, 255, 255, 0.6);
    transform: translateX(-13px);
    pointer-events: none;
  }

  #how-to-apply [data-animate] {
    opacity: 1;
    transform: none;
  }

  #how-to-apply [data-animate].is-preparing {
    opacity: 0;
    transform: translateY(24px);
    transition:
      opacity 0.6s cubic-bezier(0.2, 0.65, 0.3, 1),
      transform 0.6s cubic-bezier(0.2, 0.65, 0.3, 1);
  }

  #how-to-apply [data-animate].is-visible {
    opacity: 1;
    transform: translateY(0);
  }

  @media (prefers-reduced-motion: reduce) {
    #how-to-apply [data-animate] {
      opacity: 1;
      transform: none;
    }
  }
</style>

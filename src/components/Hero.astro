---
import { withBase } from "../utils/paths";

const {
  slides: customSlides,
  sub: customSub,
  headline: customHeadline,
  body: customBody,
  highlightWord: customHighlight,
  showButtons = true,
  ctas: providedCtas,
  scrollCue,
  scrollTarget: rawScrollTarget = "#how-to-apply",
} = Astro.props;

const defaultSlides = [
  {
    image: "/images/bg1.jpg",
    title: "ILM-SA Bursary Applications",
    sub: "Bursary Application Form 2026",
    body: "Financial assistance, mentorship, and a supportive community to help you thrive in 2026 and beyond.",
    objectPosition: "center center",
    highlight: "ILM-SA",
  },
  {
    image: "/images/bg2.jpg",
    title: "Applications close once we receive 100 submissions or on the 18th of January 2026 (whichever occurs first)",
    objectPosition: "center 20%", // keep crop fix
    highlight: "Applications close",
  },
];

const slidesSource = customSlides?.length ? customSlides : defaultSlides;
const slides = slidesSource.map((slide) => ({
  ...slide,
  image: slide?.image ? withBase(slide.image) : slide.image,
}));
const firstSlide = slides[0] ?? defaultSlides[0];

const sub = customSub ?? firstSlide.sub ?? "Bursary Application Form 2026";
const headlineText = customHeadline ?? firstSlide.title ?? "ILM-SA Bursary";
const bodyText =
  customBody ??
  firstSlide.body ??
  "Financial assistance, mentorship, and a supportive community to help you thrive in 2026 and beyond.";
const highlightWord = customHighlight ?? firstSlide.highlight ?? "ILM-SA";

const defaultCtas = [
  { href: "/apply", label: "Apply", variant: "primary" },
  { href: "#how-to-apply", label: "How to apply", variant: "outline" },
];
const ctas = (providedCtas ?? defaultCtas).map((cta) => ({
  ...cta,
  href: withBase(cta.href ?? "#"),
}));
const resolvedScrollTarget = withBase(rawScrollTarget);
---

<section class="relative isolate min-h-screen overflow-hidden text-white" data-hero>
  {slides.map((slide, index) => (
    <img
      src={slide.image}
      alt={slide.title.replace(/\n/g, " ")}
      loading={index === 0 ? "eager" : "lazy"}
      data-hero-slide
      data-title={slide.title}
      data-sub={slide.sub ?? ""}
      data-body={slide.body ?? ""}
      data-highlight={slide.highlight ?? ""}
      style={slide.objectPosition ? `object-position: ${slide.objectPosition}` : undefined}
      class={`hero-slide absolute inset-0 h-full w-full transform-gpu object-cover ${
        index === 0 ? "is-active" : "is-inactive"
      }`}
    />
  ))}

  <!-- Legibility overlay (neutral, no tint) -->
  <div class="hero-overlay absolute inset-0 bg-black/50 will-change-opacity"></div>

  <!-- Soft radial bloom (neutral, no color cast) -->
  <div class="absolute inset-0 bg-[radial-gradient(circle_at_top,rgba(255,255,255,0.12),transparent_60%)]"></div>

  {slides.length > 1 && (
    <div class="hero-nav-wrapper">
      <div class="flex flex-1"></div>
      <button
        type="button"
        class="hero-nav hero-nav-next"
        data-hero-next
        aria-label="Next slide"
      >
        <svg viewBox="0 0 24 24" fill="none" aria-hidden="true">
          <path d="M9 18l6-6-6-6" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round" />
        </svg>
      </button>
    </div>
  )}

  <div class="relative mx-auto flex min-h-screen max-w-6xl flex-col justify-between px-4 pt-32 pb-16">
    <div class="hero-content flex flex-col gap-6 will-change-transform will-change-opacity">
      <p
        class="hero-sub text-sm font-semibold uppercase tracking-[0.3em] text-white/75 opacity-0 translate-y-3"
        data-hero-sub
        data-sub-default={sub}
      >
        {sub}
      </p>

      <h1
        class="hero-heading hero-heading-change max-w-2xl text-4xl font-bold tracking-tight md:text-6xl opacity-0 translate-y-3"
        data-hero-heading
        data-title={slides[0]?.title ?? headlineText}
        data-highlight={slides[0]?.highlight ?? highlightWord}
      >
        {headlineText}
      </h1>

      <p
        class="hero-body max-w-lg text-base text-white/85 md:text-lg opacity-0 translate-y-3"
        data-hero-body
        data-body-default={bodyText}
      >
        {bodyText}
      </p>

      {showButtons && (
        <div class="hero-ctas flex flex-wrap items-center gap-3 opacity-0 translate-y-3">
          {ctas.map((cta) => (
            <a
              href={cta.href}
              class={cta.variant === "primary"
                ? "inline-flex items-center rounded-md bg-brand-secondary px-5 py-2.5 text-sm font-semibold text-white transition hover:opacity-95 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-[--brand-secondary]"
                : "inline-flex items-center rounded-md border border-white/60 px-5 py-2.5 text-sm font-medium text-white transition hover:bg-white/10 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-white/70"}
            >
              {cta.label}
            </a>
          ))}
        </div>
      )}

      {scrollCue && (
        <div class="hero-cue flex items-center gap-3 text-white/90 opacity-0 translate-y-3">
          <span class="text-sm font-semibold uppercase tracking-[0.4em] text-[color-mix(in_lch,var(--brand-secondary)_88%,white)]">{scrollCue}</span>
          <a
            href={resolvedScrollTarget}
            aria-label={scrollCue}
            title={scrollCue}
            class="flex h-12 w-12 items-center justify-center rounded-full border border-white/70 text-white shadow-[0_8px_24px_rgba(0,145,147,0.35)] transition hover:-translate-y-1 hover:border-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/80 focus-visible:ring-offset-2 focus-visible:ring-offset-[rgba(0,145,147,0.65)]"
          >
            <svg class="h-5 w-5 hero-cue-bounce" viewBox="0 0 24 24" fill="none">
              <path d="M12 5v14m0 0-5-5m5 5 5-5" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round" />
            </svg>
          </a>
        </div>
      )}
    </div>

    <div class="h-6" aria-hidden="true"></div>
  </div>
</section>

<script is:inline>
  const hero = document.querySelector('[data-hero]');
  if (!hero) throw new Error('Hero element not found');

  const heroSlides = Array.from(hero.querySelectorAll('[data-hero-slide]'));
  if (!heroSlides.length) throw new Error('No hero slides available. Ensure slides are provided.');

  const heading = hero.querySelector('[data-hero-heading]');
  const subElement = hero.querySelector('[data-hero-sub]');
  const bodyElement = hero.querySelector('[data-hero-body]');
  const nextBtn = hero.querySelector('[data-hero-next]');
  const overlay = hero.querySelector('.hero-overlay');
  const content = hero.querySelector('.hero-content');
  const parts = [
    hero.querySelector('.hero-sub'),
    hero.querySelector('.hero-heading'),
    hero.querySelector('.hero-body'),
    hero.querySelector('.hero-ctas'),
    hero.querySelector('.hero-cue'),
  ].filter(Boolean);

  const defaultSub = subElement?.dataset.subDefault ?? '';
  const defaultBody = bodyElement?.dataset.bodyDefault ?? '';
  const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');

  let currentIndex = heroSlides.findIndex((s) => s.classList.contains('is-active'));
  if (currentIndex < 0) currentIndex = 0;
  let rotationTimer;

  const escapeRegex = (s) => s.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');

  const renderHeadline = (value, highlight) => {
    let html = (value || '').replace(/\n/g, '<br>');
    if (highlight && highlight.trim()) {
      const rx = new RegExp(`\\b${escapeRegex(highlight.trim())}\\b`, 'g');
      const safeHighlight = highlight.trim();
      html = html.replace(
        rx,
        `<span class="hero-word hero-word--highlight"><span class="hero-word__glow" aria-hidden="true"></span>${safeHighlight}</span>`
      );
    }
    heading.innerHTML = html;
    heading.dataset.title = value || '';
    heading.dataset.highlight = highlight || '';
  };

  const showSlide = (index) => {
    heroSlides.forEach((slide, i) => {
      slide.classList.toggle('is-active', i === index);
      slide.classList.toggle('is-inactive', i !== index);
    });

    const activeSlide = heroSlides[index];
    renderHeadline(
      activeSlide.dataset.title ?? heading.dataset.title ?? '',
      activeSlide.dataset.highlight || ''
    );
    if (subElement) subElement.textContent = activeSlide.dataset.sub || defaultSub;
    if (bodyElement) bodyElement.textContent = activeSlide.dataset.body || defaultBody;

    currentIndex = index;
  };

  const goToNextSlide = () => {
    const nextIndex = (currentIndex + 1) % heroSlides.length;
    showSlide(nextIndex);
  };

  const startRotation = () => {
    stopRotation();
    if (prefersReducedMotion.matches || heroSlides.length < 2) return;
    rotationTimer = window.setInterval(goToNextSlide, 4800);
  };

  const stopRotation = () => {
    if (rotationTimer) {
      window.clearInterval(rotationTimer);
      rotationTimer = undefined;
    }
  };

  // Initial render + entrance reveal
  showSlide(currentIndex);
  window.requestAnimationFrame(() => {
    if (prefersReducedMotion.matches) {
      parts.forEach((el) => { el.style.opacity = 1; el.style.transform = 'none'; });
    } else {
      parts.forEach((el, i) => {
        el.style.transition = 'opacity 600ms cubic-bezier(0.2,0.65,0.3,1), transform 600ms cubic-bezier(0.2,0.65,0.3,1)';
        el.style.transitionDelay = `${120 + i * 60}ms`;
        el.style.opacity = '1';
        el.style.transform = 'translateY(0)';
      });
    }
  });

  startRotation();
  if (nextBtn) {
    nextBtn.addEventListener('click', () => {
      goToNextSlide();
      startRotation();
    });
  }
  hero.addEventListener('mouseenter', stopRotation, { passive: true });
  hero.addEventListener('mouseleave', startRotation, { passive: true });
  hero.addEventListener('touchstart', stopRotation, { passive: true });
  hero.addEventListener('touchend', startRotation, { passive: true });
  prefersReducedMotion.addEventListener?.('change', (e) => e.matches ? stopRotation() : startRotation());

  // Scroll-driven effects: content rise/fade, bg parallax scale, overlay ease-out
  const onScroll = () => {
    if (!content) return;
    const rect = hero.getBoundingClientRect();
    const vh = window.innerHeight || 1;

    // progress 0..1 within first ~70vh
    const clamp = (n, a, b) => Math.max(a, Math.min(b, n));
    const p = clamp((0 - rect.top) / (vh * 0.7), 0, 1);

    if (!prefersReducedMotion.matches) {
      // content rises ~24px and fades a touch
      content.style.transform = `translateY(${p * -24}px)`;
      content.style.opacity = String(1 - p * 0.25);

      // active slide subtle scale (Ken Burns additive)
      const active = heroSlides[currentIndex];
      if (active) {
        active.style.setProperty('--scrollScale', (1 + p * 0.04).toFixed(3));
        active.style.transform = `scale(var(--kenburnsScale,1.06)) translateZ(0)`;
      }

      // overlay eases out slightly
      if (overlay) overlay.style.opacity = String(0.5 - p * 0.18);
    }
  };
  onScroll();
  window.addEventListener('scroll', onScroll, { passive: true });
  window.addEventListener('resize', onScroll, { passive: true });
</script>

<style>
  /* Slides crossfade + Ken Burns */
  .hero-slide {
    opacity: 0;
    transition:
      opacity 900ms cubic-bezier(0.2, 0.65, 0.3, 1),
      transform 900ms cubic-bezier(0.2, 0.65, 0.3, 1);
    transform: scale(1.02) translateZ(0);
    will-change: opacity, transform;
    animation: kenburns 16s ease-in-out infinite alternate;
    --kenburnsScale: 1.06;
  }
  .hero-slide.is-active { opacity: 1; }
  .hero-slide.is-inactive { opacity: 0; }
  @keyframes kenburns {
    0%   { transform: scale(var(--kenburnsScale,1.06)) translate3d(0px, 0px, 0); }
    100% { transform: scale(calc(var(--kenburnsScale,1.06) + 0.02)) translate3d(0px, -6px, 0); }
  }

  .hero-nav-wrapper {
    position: absolute; inset: 0; display: flex; align-items: center; pointer-events: none;
  }
  .hero-nav { pointer-events: auto; margin-right: 1rem; height: 2.5rem; width: 2.5rem;
    display: inline-flex; align-items: center; justify-content: center; color: #fff; border: 1px solid rgba(255,255,255,.65);
    border-radius: 9999px; background: rgba(0,0,0,.2); backdrop-filter: blur(6px);
    transition: transform .2s ease, background .2s ease, border-color .2s ease;
  }
  .hero-nav:hover { transform: translateX(2px); background: rgba(0,0,0,.3); border-color: #fff; }

  /* Highlight word glow + underline sweep */
  .hero-word {
    position: relative; display: inline-block;
    text-shadow: 0 0 18px color-mix(in lch, var(--brand-secondary) 20%, transparent);
  }
  .hero-word__glow {
    position:absolute; inset:-4px -6px; border-radius:.6rem;
    background: radial-gradient(120px 40px at 50% 80%, color-mix(in lch, var(--brand-secondary) 20%, transparent), transparent);
    filter: blur(14px); opacity:.75; pointer-events:none;
  }
  .hero-word--highlight {
    background-image: linear-gradient(90deg, var(--brand-secondary), var(--brand-primary));
    -webkit-background-clip: text; background-clip: text; color: transparent;
  }
  .hero-heading .hero-word--highlight::after {
    content:""; position:absolute; left:0; right:0; bottom:-0.15em; height:2px;
    background: linear-gradient(90deg, var(--brand-secondary), var(--brand-primary), transparent);
    transform-origin: left center; transform: scaleX(0); animation: underlineSweep 900ms cubic-bezier(.2,.65,.3,1) 180ms forwards;
  }
  @keyframes underlineSweep { to { transform: scaleX(1); } }

  /* Entrance bounce for cue (subtle) */
  .hero-cue-bounce { animation: cue 2.6s ease-in-out infinite; }
  @keyframes cue {
    0%, 100% { transform: translateY(0); opacity: 1; }
    50%      { transform: translateY(4px); opacity: .9; }
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .hero-slide { animation: none !important; transform: none !important; }
    .hero-cue-bounce { animation: none !important; }
  }
</style>
